// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: calculator.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Calcultor {
  public static partial class CalcultorService
  {
    static readonly string __ServiceName = "calcultor.CalcultorService";

    static readonly grpc::Marshaller<global::Calcultor.CalculateRequest> __Marshaller_calcultor_CalculateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calcultor.CalculateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Calcultor.CalculateResponse> __Marshaller_calcultor_CalculateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calcultor.CalculateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse> __Method_Add = new grpc::Method<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Add",
        __Marshaller_calcultor_CalculateRequest,
        __Marshaller_calcultor_CalculateResponse);

    static readonly grpc::Method<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse> __Method_Substract = new grpc::Method<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Substract",
        __Marshaller_calcultor_CalculateRequest,
        __Marshaller_calcultor_CalculateResponse);

    static readonly grpc::Method<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse> __Method_Multiply = new grpc::Method<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Multiply",
        __Marshaller_calcultor_CalculateRequest,
        __Marshaller_calcultor_CalculateResponse);

    static readonly grpc::Method<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse> __Method_Division = new grpc::Method<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Division",
        __Marshaller_calcultor_CalculateRequest,
        __Marshaller_calcultor_CalculateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Calcultor.CalculatorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CalcultorService</summary>
    [grpc::BindServiceMethod(typeof(CalcultorService), "BindService")]
    public abstract partial class CalcultorServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Calcultor.CalculateResponse> Add(global::Calcultor.CalculateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Calcultor.CalculateResponse> Substract(global::Calcultor.CalculateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Calcultor.CalculateResponse> Multiply(global::Calcultor.CalculateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Calcultor.CalculateResponse> Division(global::Calcultor.CalculateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CalcultorService</summary>
    public partial class CalcultorServiceClient : grpc::ClientBase<CalcultorServiceClient>
    {
      /// <summary>Creates a new client for CalcultorService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CalcultorServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CalcultorService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CalcultorServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CalcultorServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CalcultorServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Calcultor.CalculateResponse Add(global::Calcultor.CalculateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Add(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Calcultor.CalculateResponse Add(global::Calcultor.CalculateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Add, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Calcultor.CalculateResponse> AddAsync(global::Calcultor.CalculateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Calcultor.CalculateResponse> AddAsync(global::Calcultor.CalculateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Add, null, options, request);
      }
      public virtual global::Calcultor.CalculateResponse Substract(global::Calcultor.CalculateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Substract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Calcultor.CalculateResponse Substract(global::Calcultor.CalculateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Substract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Calcultor.CalculateResponse> SubstractAsync(global::Calcultor.CalculateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubstractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Calcultor.CalculateResponse> SubstractAsync(global::Calcultor.CalculateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Substract, null, options, request);
      }
      public virtual global::Calcultor.CalculateResponse Multiply(global::Calcultor.CalculateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Multiply(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Calcultor.CalculateResponse Multiply(global::Calcultor.CalculateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Multiply, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Calcultor.CalculateResponse> MultiplyAsync(global::Calcultor.CalculateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MultiplyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Calcultor.CalculateResponse> MultiplyAsync(global::Calcultor.CalculateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Multiply, null, options, request);
      }
      public virtual global::Calcultor.CalculateResponse Division(global::Calcultor.CalculateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Division(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Calcultor.CalculateResponse Division(global::Calcultor.CalculateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Division, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Calcultor.CalculateResponse> DivisionAsync(global::Calcultor.CalculateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DivisionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Calcultor.CalculateResponse> DivisionAsync(global::Calcultor.CalculateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Division, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CalcultorServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CalcultorServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CalcultorServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Add, serviceImpl.Add)
          .AddMethod(__Method_Substract, serviceImpl.Substract)
          .AddMethod(__Method_Multiply, serviceImpl.Multiply)
          .AddMethod(__Method_Division, serviceImpl.Division).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CalcultorServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Add, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse>(serviceImpl.Add));
      serviceBinder.AddMethod(__Method_Substract, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse>(serviceImpl.Substract));
      serviceBinder.AddMethod(__Method_Multiply, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse>(serviceImpl.Multiply));
      serviceBinder.AddMethod(__Method_Division, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calcultor.CalculateRequest, global::Calcultor.CalculateResponse>(serviceImpl.Division));
    }

  }
}
#endregion
